import Head from 'next/head'
import { useEffect, useState, useRef, useCallback } from 'react';
import { useSelector, useDispatch } from 'react-redux'
import { getVideoList, selectedValue } from '../store/reducers/videoListReducer';
import { IVideoResult } from '../types/videoList';

const VideoList = () => {
  const dispatch = useDispatch()
  const videoResult = useSelector(selectedValue) as IVideoResult
  const { loaded, loading, result: list } = videoResult

  useEffect(() => {
      (async () => {
          await dispatch(getVideoList())
      })()
  }, [dispatch])

  const [selectedVideoIndex, setSelectedVideoIndex] = useState(-1);
  const videoRefs = useRef<Array<HTMLVideoElement>>([]);

  useEffect(() => {
    //add eventlistener to window
    window.addEventListener("scroll", isInViewport, { passive: true });
    // remove event on unmount to prevent a memory leak with the cleanup
    return () => {
      window.removeEventListener("scroll", isInViewport);
    }
  }, [loaded]);


  const isInViewport = useCallback(() => {
    // console.log('is in view port', list)
    // console.log('window.innerHeight', window.innerHeight)
    for(let i = list.length; i--;) {
      const rect = videoRefs.current[i].getBoundingClientRect();
      // console.log('window height: \n', (window.innerHeight / 2) - (rect.height / 2), rect.top)
      // const topBoundries = (window.innerHeight / 2) - (rect.height / 2)
      if(rect.top >= rect.height && (rect.top <= (window.innerHeight / 2))) {
        setSelectedVideoIndex(i)
      } else {
        // setSelectedVideoIndex(-1)
      }
    }
  }, [loaded]);

  type RectResult = {
    bottom: number;
    top: number;
    height: number;
  };

  function getRect<T extends HTMLElement>(element?: T): RectResult {
    let rect: RectResult = {
      bottom: 0,
      top: 0,
      height: 0
    };
    if (element) rect = element.getBoundingClientRect();
    return rect;
  }

  return (
    <div style={{ display: 'flex', flexWrap: 'wrap', alignItems: 'center', justifyContent: 'center', height: '100vh', maxWidth: '600px', width: '100%' }}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {loading && <div>Loading...</div>}
        {loaded && list.map((video, index) => (
          <video
            id={`${index}`}
            key={video.id}
            ref={(el: HTMLVideoElement) => {
              // @ts-ignore: Unreachable code error
              videoRefs.current[index] = el
            }}
            style={{ width: '100%', margin: '10px 20px', objectFit: 'cover' }}
            src={video.attributes.preview_src}
              // @ts-ignore: Unreachable code error
            autoPlay={index === selectedVideoIndex ? "autoPlay" : ""}
            muted
            onPlay={() => setSelectedVideoIndex(index)}
            onPause={() => setSelectedVideoIndex(-1)}
          />
        ))}
    </div>
  );
};


export default VideoList;